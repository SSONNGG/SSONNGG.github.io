{"title":"设计模式 | 单例模式","uid":"551213df1ede49a01e542dc0e5bc96b6","slug":"设计模式-单例模式","date":"2021-07-25T06:13:38.000Z","updated":"2021-07-25T06:25:58.409Z","comments":true,"path":"api/articles/设计模式-单例模式.json","keywords":null,"cover":[],"content":"<h1 id=\"零、定义\"><a href=\"#零、定义\" class=\"headerlink\" title=\"零、定义\"></a>零、定义</h1><p>单例模式的定义</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote>\n<p>其中单例模式分为<strong>懒汉式</strong>和<strong>饿汉式</strong>：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>懒汉式：在装载类的时候不创建对象实例，等到第一次使用的时候，才去创建实例<br>饿汉式：在装载类的时候就创建好实例对象</p></blockquote>\n<hr>\n<p>单例模式的本质：<strong>控制实例数目</strong></p>\n<h1 id=\"一、单例模式的功能、范围以及调用顺序\"><a href=\"#一、单例模式的功能、范围以及调用顺序\" class=\"headerlink\" title=\"一、单例模式的功能、范围以及调用顺序\"></a>一、单例模式的功能、范围以及调用顺序</h1><h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>单例模式保证这个类在运行期间只会创建一个类实例，单例模式提供了一个全局唯一访问这个类实例的访问点。只需要关心类实例的创建问题，并不用关心具体的业务功能。</p>\n<h2 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h2><p>目前 Java 中实现的单例是一个虚拟机的范围。因为装载类的功能是虚拟机的，所以一个虚拟机在通过自己的 <code>ClassLoader</code> 装载饿汉式实现单例类的时候就会创建一个类的实例。</p>\n<h2 id=\"调用顺序\"><a href=\"#调用顺序\" class=\"headerlink\" title=\"调用顺序\"></a>调用顺序</h2><p><img src=\"./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20210725142243077.png\" alt=\"懒汉式单例模式的调用顺序\"></p>\n<p><img src=\"./%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20210725142429796.png\" alt=\"饿汉式单例模式的调用顺序\"></p>\n","feature":true,"text":"零、定义单例模式的定义 保证一个类仅有一个实例，并提供一个访问它的全局访问点 其中单例模式分为懒汉式和饿汉式： 懒汉式：在装载类的时候不创建对象实例，等到第一次使用的时候，才去创建实例饿汉式：在装载类的时候就创建好实例对象 单例模式的本质：控制实例数目 一、单例模式的功能、范围以...","link":"","photos":[],"count_time":{"symbolsCount":340,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9B%B6%E3%80%81%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">零、定义</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%81%E8%8C%83%E5%9B%B4%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">一、单例模式的功能、范围以及调用顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">功能</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">范围</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">调用顺序</span></a></li></ol></li></ol>","author":{"name":"SongX_","slug":"blog-author","avatar":"https://z3.ax1x.com/2021/07/18/W3gCA1.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"算法 | 并查集","uid":"8d800d163db722a0bbd28451e306e75e","slug":"算法-并查集","date":"2021-01-22T06:37:47.000Z","updated":"2021-02-03T08:12:58.000Z","comments":true,"path":"api/articles/算法-并查集.json","keywords":null,"cover":[],"text":"&emsp;&emsp;原文地址：零基础彻底弄懂”并查集” &emsp;&emsp;最近在 LeetCode 上尝试提升自己的算法能力，在研究过程中，评论区常常提到一个词——“并查集”。秉着好奇的心理，我就尝试去了解了一下，发现这个算法还是挺重要挺有难度的，特此转载这篇文章，非常...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":1,"path":"api/categories/数据结构.json"},{"name":"C","slug":"C","count":1,"path":"api/categories/C.json"},{"name":"算法","slug":"算法","count":1,"path":"api/categories/算法.json"}],"tags":[{"name":"笔记","slug":"笔记","count":1,"path":"api/tags/笔记.json"}],"author":{"name":"SongX_","slug":"blog-author","avatar":"https://z3.ax1x.com/2021/07/18/W3gCA1.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}