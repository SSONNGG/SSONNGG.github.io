{"name":"Java","slug":"Java","count":3,"postlist":[{"title":"Eureka相关理论","uid":"16e16a971c2690fe161fa7eece5339e5","slug":"Eureka相关理论","date":"2020-10-25T09:32:51.000Z","updated":"2021-07-25T06:14:14.317Z","comments":true,"path":"api/articles/Eureka相关理论.json","keywords":null,"cover":[],"text":"一、EureKa核心概念Eureka 采用了 C-S 的设计架构。Eureka Server 作为服务注册功能的服务器，它是服务注册中心。 整体上可以分为两个主体：Eureka Server 和 Eureka Client. Service provider(服务提供者：负责服务...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"},{"name":"EureKa","slug":"EureKa","count":1,"path":"api/categories/EureKa.json"},{"name":"Spring","slug":"Java/Spring","count":1,"path":"api/categories/Java/Spring.json"}],"tags":[{"name":"Spring","slug":"Spring","count":1,"path":"api/tags/Spring.json"}],"author":{"name":"SongX_","slug":"blog-author","avatar":"https://z3.ax1x.com/2021/07/18/W3gCA1.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"SpringBoot启动类源码阅读","uid":"31d5cedf656bd0b6317d2ab32b6a27f2","slug":"SpringBoot启动源码阅读","date":"2020-10-17T11:48:49.000Z","updated":"2021-07-25T06:00:13.734Z","comments":true,"path":"api/articles/SpringBoot启动源码阅读.json","keywords":null,"cover":null,"text":"&emsp;&emsp;最近在学习 SpringBoot ，老师恰好有布置阅读 SpringBoot 源码的任务，因此决定根据老师的博客文章写一下有关于 SpringBoot 的源码阅读。 &emsp;&emsp;博客链接 &emsp;&emsp;我们知道 SpringBoot ...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"},{"name":"SpringBoot","slug":"Java/SpringBoot","count":1,"path":"api/categories/Java/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"}],"author":{"name":"SongX_","slug":"blog-author","avatar":"https://z3.ax1x.com/2021/07/18/W3gCA1.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"设计模式 | 单例模式","uid":"551213df1ede49a01e542dc0e5bc96b6","slug":"设计模式-单例模式","date":"2021-07-25T06:13:38.000Z","updated":"2021-07-25T06:25:58.409Z","comments":true,"path":"api/articles/设计模式-单例模式.json","keywords":null,"cover":[],"text":"零、定义单例模式的定义 保证一个类仅有一个实例，并提供一个访问它的全局访问点 其中单例模式分为懒汉式和饿汉式： 懒汉式：在装载类的时候不创建对象实例，等到第一次使用的时候，才去创建实例饿汉式：在装载类的时候就创建好实例对象 单例模式的本质：控制实例数目 一、单例模式的功能、范围以...","link":"","photos":[],"count_time":{"symbolsCount":340,"symbolsTime":"1 mins."},"categories":[{"name":"Java","slug":"Java","count":3,"path":"api/categories/Java.json"},{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/tags/设计模式.json"}],"author":{"name":"SongX_","slug":"blog-author","avatar":"https://z3.ax1x.com/2021/07/18/W3gCA1.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}]}