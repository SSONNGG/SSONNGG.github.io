[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nTest git\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-07-18T04:40:49.886Z","categories_index":"","tags_index":"","author_index":"SongX_"},{"id":"16e16a971c2690fe161fa7eece5339e5","title":"Eureka相关理论","content":"一、EureKa核心概念Eureka 采用了 C-S 的设计架构。Eureka Server 作为服务注册功能的服务器，它是服务注册中心。\n整体上可以分为两个主体：Eureka Server 和 Eureka Client. Service provider(服务提供者：负责服务注册和续约的操作) 和 Service consumer(服务消费者：负责获取服务注册的信息) 本质都是Eureka Client.\nEureKa 保证了 CAP 中的 AP（即可用性和分区容忍性）\nEureKa中注册信息和服务器上的信息保证了最终一致性（即服务器宕掉之后仍旧能使用，上线后再次进行同步。不考虑中间不一致）\nEureka Server：注册中心服务端\n服务注册: \n服务提供者启动时，会通过 Eureka Client 向 Eureka Server 发送 REST请求 的方式向 Eureka Server 注册自己的服务信息数据，这些数据是服务自身的元数据，比如ip地址、端口、运行状况指标的url、主页地址等信息, Eureka Server 会存储该服务的信息，Eureka Server 内部有二层缓存机制 (一个双层的Map) 中来维护整个注册表。\n\n\n提供注册表: \n服务消费者在调用服务时，如果 Eureka Client 没有缓存注册表的话，会从 Eureka Server 获取最新的注册表。\n\n同步状态: \nEureka Client 通过注册、心跳机制和 Eureka Server 同步当前客户端的状态。\n\nEviction 服务剔除：\n当 Eureka Client 和 Eureka Server 不再有心跳时，Eureka Server 会将该服务实例从服务注册列表中删除，即服务剔除。\n\n\nEureka Client：注册中心客户端&emsp;&emsp;它是一个 Java 客户端，用于简化与 Eureka Server 的交互。Eureka Client 会拉取、更新和缓存Eureka Server 中的信息。因此当所有的 Eureka Server 节点都宕掉，服务消费者依然可以使用缓存中的信息找到服务提供者，但是当服务有更改的时候会出现信息不一致. (分布式集群最重要的问题：如何保持数据的一致性？EureKa满足最终一致，因为 EureKa 需要保持 CAP 中的 AP )\n\nRegister:  服务注册\n服务的提供者, 将自身注册到注册中心，服务提供者也是一个 Eureka Client。\n\nRenew:  服务续约\n&emsp;&emsp;Eureka Client 会每隔 30 秒发送一次心跳来续约。 通过续约来告知 Eureka Server 该 Eureka Client 运行正常，没有出现问题。 默认情况下，如果 Eureka Server 在 90 秒内没有收到 Eureka Client 的续约，Server 端会将实例从其注册表中删除，此时间可配置，一般情况不建议更改。\n有关修改服务续约调用时间的属性（可在application.yml中修改）：\n# 服务续约任务的调用间隔时间，默认为30秒\neureka.instance.lease-renewal-interval-in-seconds=30\n# 服务失效的时间，默认为90秒。\neureka.instance.lease-expiration-duration-in-seconds=90\nCancel:  服务下线 \n&emsp;&emsp;Eureka Client 在程序关闭时向 Eureka Server 发送取消请求。 发送请求后，该客户端实例信息将从 Eureka Server 的实例注册表中删除。该下线请求不会自动完成，它必须调用以下内容（意味着直接关闭客户端不会在注册表中删除，因为少调用了以下代码）：\nDiscoveryManager.getInstance().shutdownComponent();\nGetRegisty:  获取注册列表信息 \n&emsp;&emsp;Eureka Client 从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次（数据一致性）。每次返回注册列表信息可能与 Eureka Client 的缓存信息不同，Eureka Client 自动处理。\n&emsp;&emsp;如何判断信息是否更新了？不是将所有信息全部拉取下来进行比对，此时网络传输量过大。\n&emsp;&emsp;传输信息指纹码（MD5加密或HashCode码），数据进行MD5运算后得到唯一的数值，将这个数值拉取到本地来进行比对，如果数值没有变化，则表示信息没有更新。如果指纹码与本地指纹码不同，则拉取更新后的数据。\n&emsp;&emsp;如果由于某种原因导致注册列表信息不能及时匹配，Eureka Client 则会重新获取整个注册表信息。 Eureka Server 缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。Eureka Client 和 Eureka Server 可以使用 json/xml 格式进行通讯。在默认情况下 Eureka Client 使用压缩 json 格式来获取注册列表的信息。\n# 启用服务消费者从注册中心拉取服务列表的功能\neureka.client.fetch-registry=true\n# 设置服务消费者从注册中心拉取服务列表的间隔\neureka.client.registry-fetch-interval-seconds=30\nRemote Call:  远程调用 \n&emsp;&emsp;当 Eureka Client 从注册中心获取到服务提供者信息后，就可以通过 Http 请求调用对应的服务；服务提供者有多个时，Eureka Client 客户端会通过 Ribbon 自动进行负载均衡。\n\n\n二. 自我保护机制&emsp;&emsp;默认情况下，如果 Eureka Server 在一定的 90s 内没有接收到某个微服务实例的心跳，会注销该实例。但是在微服务架构下服务之间通常都是跨进程调用，网络通信往往会面临着各种问题，比如微服务状态正常，网络分区故障，导致此实例被注销。固定时间内大量实例被注销，可能会严重威胁整个微服务架构的可用性。为了解决这个问题，Eureka 开发了自我保护机制。\n&emsp;&emsp; Eureka Server 在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 即会进入自我保护机制。\n\nEureka Server 进入自我保护机制，会出现以下几种情况：\n\nEureka 不再从注册列表中移除因为长时间没收到心跳而应该过期的服务\n\nEureka 仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)\n\n当网络稳定时，当前实例新的注册信息会被同步到其它节点中\n\n\n&emsp;&emsp;Eureka 自我保护机制是为了防止误杀服务而提供的一个机制。当个别客户端出现心跳失联时，则认为是客户端的问题，剔除掉客户端；当 Eureka 捕获到大量的心跳失败时，则认为可能是网络问题，进入自我保护机制；当客户端心跳恢复时，Eureka 会自动退出自我保护机制。\n&emsp;&emsp;如果在保护期内刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，即会调用失败。对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。\neureka.server.enable-self-preservation=true   # 开启自我保护机制\n\n三、EureKa 集群工作原理&emsp;&emsp;Eureka Server 集群相互之间通过 Replicate 来同步数据，相互之间不区分主节点和从节点，所有的节点都是平等的（独立关系）。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的 serviceUrl 指向其他节点。\nservice-url:\n\tdefaultZone: http://admin:a@eureka1:7001/eureka,http://admin:a@eureka2:7002/eureka,http://admin:a@eureka3:7003/eureka\n\n&emsp;&emsp;如果某台 Eureka Server 宕机，Eureka Client 的请求会自动切换到新的 Eureka Server 节点。\n&emsp;&emsp;因为生产端（provider）/消费端（consumer）–&gt;皆为 Server，同样配置了 defaultZone 信息\neureka:\n\tclient: # 客户端进行Eureka注册的配置\n\t\tservice-url:\n      \t\tdefaultZone: http://admin:a@eureka1:7001/eureka,http://admin:a@eureka2:7002/eureka,http://admin:a@eureka3:7003/eureka\n\n&emsp;&emsp;当宕机的服务器重新恢复后，Eureka 会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行节点间复制，将请求复制到其它 Eureka Server 当前所知的所有节点中，完成数据同步。\n&emsp;&emsp;另外 Eureka Server 的同步遵循着一个非常简单的原则：只要有一条边将节点连接，就可以进行信息传播与同步。所以，如果存在多个节点，只需要将节点之间两两连接起来形成通路，那么其它注册中心都可以共享信息。每个 Eureka Server 同时也是 Eureka Client，多个 Eureka Server 之间通过 P2P 的方式完成服务注册表的同步。\n&emsp;&emsp;Eurka 保证 AP( 可用性（Availability）、分区容错性（Partition tolerance） ) , 而不保证 C ( 一致性（Consistency）) \n&emsp;&emsp;Eureka Server 各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而 Eureka Client 在向某个 Eureka 注册时，如果发现连接失败，则会自动切换至其它节点。只要有一台 Eureka Server 还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。\n","slug":"Eureka相关理论","date":"2020-10-25T09:32:51.000Z","categories_index":"Java,SpringCloude,EureKa","tags_index":"SpringCloude","author_index":"SongX_"},{"id":"06c79e7bba8774606a6162ce8ebd9c31","title":"宋宋 の Blog 施工档案","content":"2021.7.25施工档案图片链接可用\n2021.7.18施工档案博客主题重置\n博客维护完毕\n文章暂未上线，后续补充上线\n\n\n\n\n\n\n\n目前存在的问题\n图片链接失效\n评论功能暂时无法使用\n封面无法正常显示\n\n\n2021.2.01施工档案将代码样式由 ‘Github Gist’ 改为 ‘Tomorrow Night Eighties’ \n2021.1.13施工档案修改了config.yml文件，以及将SSH部署到Github上，现在可以不用反复输入github账号和密码可以直接上传写好的文章了。\n升级了 Hexo 版本到5.3.0\n关于页面补充添加了2021年寒假计划，望监督。\n2020.7.22施工档案\n修改了主页默认背景图\n修改了文章默认背景图\n将顶部导航栏的颜色值由 #26679d修改为 #2f71a3\n添加了关于页面的博客介绍\n\n2020.7.19施工档案\n修改对KateX公式块的支持。\n现在可以正常显示复杂的数学公式，便于书写数学公式（需要在 Font-matter 中加入 math 标签）\n\n\n$$\\lim_{n \\to +\\infty}{f(n)/n^3}=\\lim_{n \\to +\\infty}{2n^3+3n^2+2n+1}/n^3$$\n\n同时修改了文章标签与文章类型的逻辑，标签现在不具备多级属性。\n\n2020.7.12晚间施工欢迎来到宋宋的博客，本博客基于Github资源库搭建，会上传如下内容，欢迎评论留言建议\n\n学习笔记\n辩论相关\n编程相关\nIDE配置\n\n正式上线，处于测试期，欢迎至微信、QQ、微博等社交平台提出您的建议。\n如有可优化的部分会尽快安排优化\n目前在安排的优化内容：\n\n评论回复邮件提醒\nabout页面内容\n\n","slug":"公告","date":"2020-07-12T15:10:55.000Z","categories_index":"","tags_index":"置顶","author_index":"SongX_"}]